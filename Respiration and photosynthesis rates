respiration and photosynthesis rates
## Coral symbiotic respiration and photosynthesis rates
# Bleached corals Respiration ---------------------------------
# Entire Data analysis related to the respiration and photosynthesis rates
# these variables were standardized for surface area

## Upload data tables ---------------------------------------------------
tab_res <- read.csv2("C:/Users/Maria/Documents/Maria Antonieta/Second_Manuscript/Data/respi3.csv", dec=".", sep = ",", header=T) 

#First we calculate and extract necessary information 
#from the table to make the data analysis easier
#analysis was performed for t0 - t1 - t2

#t0
tab_res <- data.frame(tab_res)
tab_res_t0 <- filter(tab_res, measurement == "t0")

tab_incubations_t0 <- tab_res_t0 %>% 
  mutate(day = as.numeric(as.factor(date)),  #adds column for day as number, converted from the date
         light_diff_t0 = (o2_end_light - o2_start_light)/time_ligth*60,  #difference in O2 per h
         dark_diff_t0 = (o2_end_dark - o2_start_dark)/time_dark*60,
         waterVolume_t0 = 1005.011 - (water_volume / 1000), #calculate water Volume_t1 in jars
         waterVolume_t0 = replace_na(waterVolume_t0,1005.011), #replace NAs in controls with Volume_t1 of jar
         light_O2_perL_t0 = light_diff_t0/waterVolume_t0*1000,
         dark_O2_perL_t0 =  dark_diff_t0/waterVolume_t0*1000)
#t1
tab_res_t1 <- filter(tab_res, measurement == "t1")
tab_incubations_t1 <- tab_res_t1 %>% 
  mutate(day = as.numeric(as.factor(date)),  #adds column for day as number, converted from the date
         light_diff_t1 = (o2_end_light - o2_start_light)/time_ligth*60,  #difference in O2 per h
         dark_diff_t1 = (o2_end_dark - o2_start_dark)/time_dark*60,
         waterVolume_t1 = 1005.011 - (water_volume / 1000), #calculate water Volume_t1 in jars
         waterVolume_t1 = replace_na(waterVolume_t1,1005.011), #replace NAs in controls with Volume_t1 of jar
         light_O2_perL_t1 = light_diff_t1/waterVolume_t1*1000,
         dark_O2_perL_t1 =  dark_diff_t1/waterVolume_t1*1000)

#t2
tab_res_t2 <- filter(tab_res, measurement == "t2")

tab_incubations_t2 <- tab_res_t2 %>% 
  mutate(day = as.numeric(as.factor(date)),  #adds column for day as number, converted from the date
         light_diff_t2 = (o2_end_light - o2_start_light)/time_ligth*60,  #difference in O2 per h
         dark_diff_t2 = (o2_end_dark - o2_start_dark)/time_dark*60,
         waterVolume_t2 = 1005.011 - (water_volume / 1000), #calculate water Volume_t1 in jars
         waterVolume_t2 = replace_na(waterVolume_t2,1005.011), #replace NAs in controls with Volume_t1 of jar
         light_O2_perL_t2 = light_diff_t2/waterVolume_t2*1000,
         dark_O2_perL_t2 =  dark_diff_t2/waterVolume_t2*1000)

#save
write.table(tab_incubations_t0, sep = ";", 
            "Output/tab_incubations_t0.csv")
write.table(tab_incubations_t1, sep = ";", 
            "Output/tab_incubations_t1.csv")
write.table(tab_incubations_t2, sep = ";", 
            "Output/tab_incubations_t2.csv")

#Calculate means from control incubations separated by 
#light and dark incubation 

#t0
control_rates_light_t0 <-
  tab_incubations_t0 %>%
  filter(fragment=="control") %>% 
  group_by(day) %>%
  get_summary_stats(light_O2_perL, type = "mean_sd") %>% 
  rename(con_light_O2_perL = mean)  %>% 
  select(day, con_light_O2_perL)  

control_rates_dark_t0 <-
  tab_incubations_t0 %>%
  filter(fragment=="control") %>% 
  group_by(day) %>%
  get_summary_stats(dark_O2_perL, type = "mean_sd") %>% 
  rename(con_dark_O2_perL = mean) %>% 
  select(day, con_dark_O2_perL)

# Merge light and dark controls together
control <- merge(control_rates_light_t0, control_rates_dark_t0, by="day", all = TRUE)
#clean
tab_psrate_t0 <- tab_incubations_t0 %>% 
  filter(fragment!="control") %>% 
  select(fragment, species,day,measurement,food, genotype, state, food,surf, light_O2_perL, dark_O2_perL)

# Add controls as row behind data from fragments
tab_psrate_t0 <- merge(tab_psrate_t0, control, by="day", all = TRUE)

# Subtract controls from incubations and standardize to 
#Surface_t1 area of the fragment
tab_psrate_t0 <- tab_psrate_t0 %>% 
  mutate(light_O2_perL_corrected = light_O2_perL - con_light_O2_perL, #subtract controls
         dark_O2_perL_corrected = dark_O2_perL - con_dark_O2_perL, 
         light_O2_perL_percm2 = light_O2_perL_corrected/(surf/100), #correct for Surface_t1 area
         dark_O2_perL_percm2 = dark_O2_perL_corrected/(surf/100), 
         net_ps = light_O2_perL_percm2*1000, #convert to µmO2
         respiration = (dark_O2_perL_percm2*1000)*-1,# convert to consumed oxygen to positive values
         gross_ps = net_ps + respiration) %>% 
  select(fragment, genotype,species,state,measurement, food, day, net_ps, respiration, gross_ps)

#save
write.table(tab_psrate_t0, sep = ";", "Output/Tab_photosynthesisrates_processed_t0.csv")
datatable(tab_psrate_t0, caption = "Table 2: Tab_photosynthesisrates_processed_t0.")

#t1
tab_incubations_t1 <- filter(tab_incubations, measurement == "t1")

control_rates_light_t1 <-
  tab_incubations_t1 %>%
  filter(fragment=="control") %>% 
  group_by(day) %>%
  get_summary_stats(light_O2_perL, type = "mean_sd") %>% 
  rename(con_light_O2_perL = mean)  %>% 
  select(day, con_light_O2_perL)  

control_rates_dark_t1 <-
  tab_incubations_t1 %>%
  filter(fragment=="control") %>% 
  group_by(day) %>%
  get_summary_stats(dark_O2_perL, type = "mean_sd") %>% 
  rename(con_dark_O2_perL = mean) %>% 
  select(day, con_dark_O2_perL)

# Merge light and dark controls together
control <- merge(control_rates_light_t1, control_rates_dark_t1, by="day", all = TRUE)
tab_psrate_t1 <- tab_incubations_t1 %>% 
  filter(fragment!="control") %>% 
  select(fragment, species,day,measurement,food, genotype, state, food,surf, light_O2_perL, dark_O2_perL)

# Add controls as row behind data from fragments
tab_psrate_t1 <- merge(tab_psrate_t1, control, by="day", all = TRUE)
# Subtract controls from incubations and standardize to 
#Surface_t1 area of the fragment
tab_psrate_t1 <- tab_psrate_t1 %>% 
  mutate(light_O2_perL_corrected = light_O2_perL - con_light_O2_perL, #subtract controls
         dark_O2_perL_corrected = dark_O2_perL - con_dark_O2_perL, 
         light_O2_perL_percm2 = light_O2_perL_corrected/(surf/100), #correct for Surface_t1 area
         dark_O2_perL_percm2 = dark_O2_perL_corrected/(surf/100), 
         net_ps = light_O2_perL_percm2*1000, #convert to µmO2
         respiration = (dark_O2_perL_percm2*1000)*-1,# convert to consumed oxygen to positive values
         gross_ps = net_ps + respiration) %>% 
  select(fragment, genotype, species, state,measurement,food, day, net_ps, respiration, gross_ps)

#Save
write.table(tab_psrate_t1, sep = ";", "Output/Tab_photosynthesisrates_processed_t1.csv")
datatable(tab_psrate_t1, caption = "Table 2: Tab_photosynthesisrates_processed_t1.")

#t2
tab_incubations_t2 <- filter(tab_incubations, measurement == "t2")

control_rates_light_t2 <-
  tab_incubations_t2 %>%
  filter(fragment=="control") %>% 
  group_by(day) %>%
  get_summary_stats(light_O2_perL, type = "mean_sd") %>% 
  rename(con_light_O2_perL = mean)  %>% 
  select(day, con_light_O2_perL)  

control_rates_dark_t2 <-
  tab_incubations_t2 %>%
  filter(fragment=="control") %>% 
  group_by(day) %>%
  get_summary_stats(dark_O2_perL, type = "mean_sd") %>% 
  rename(con_dark_O2_perL = mean) %>% 
  select(day, con_dark_O2_perL)

# Merge light and dark controls together
control <- merge(control_rates_light_t2, control_rates_dark_t2, by="day", all = TRUE)
tab_psrate_t2 <- tab_incubations_t2 %>% 
  filter(fragment!="control") %>% 
  select(fragment, species,day,measurement,food, genotype, state, food,surf, light_O2_perL, dark_O2_perL)

# Add controls as row behind data from fragments
tab_psrate_t2 <- merge(tab_psrate_t2, control, by="day", all = TRUE)
# Subtract controls from incubations and standardize to 
#Surface_t1 area of the fragment
tab_psrate_t2 <- tab_psrate_t2 %>% 
  mutate(light_O2_perL_corrected = light_O2_perL - con_light_O2_perL, #subtract controls
         dark_O2_perL_corrected = dark_O2_perL - con_dark_O2_perL, 
         light_O2_perL_percm2 = light_O2_perL_corrected/(surf/100), #correct for Surface_t1 area
         dark_O2_perL_percm2 = dark_O2_perL_corrected/(surf/100), 
         net_ps = light_O2_perL_percm2*1000, #convert to µmO2
         respiration = (dark_O2_perL_percm2*1000)*-1,# convert to consumed oxygen to positive values
         gross_ps = net_ps + respiration) %>% 
  select(fragment, genotype, species, state,measurement,food, day, net_ps, respiration, gross_ps)

#save
write.table(tab_psrate_t2, sep = ";", "Output/Tab_photosynthesisrates_processed_t2.csv")
datatable(tab_psrate_t2, caption = "Table 2: Tab_photosynthesisrates_processed_t2.")

# Descriptive statistics ------------------------------------------------
# ----- 1. Explanation of this part of the script ------------------------------------------
# This script focuses on the statistical analyzes of the corals photosynthesis and respiration rates. Respiration and photosynthesis was measured in
#   a) Respiration in Symbiotic and Bleached corals 
#   b) Net photosynthesis of Symbiotic corals
#   c) Gross photosynthesis of Symbiotic corals
# This script builds up on data tables produced before
#   here photosynthesis and respiration rates were calculated at the end of the 13 weeks.
#     t0-t2: week 0 to 13 after the start experiment
# Statistical analyzes will be conducted using LMER 
#   together with a holm adjusted glht summary

# Prepare data for statistical analyzes --------------------------------------------------------
# relevel treatments in all tables
#Variable food as a factor
tab_respiration$food = as.factor(tab_respiration$food)
#re name labels - food
levels(tab_respiration$food)
tab_respiration$food = factor(tab_respiration$food, levels = c(5,2,3,1,4),
                         labels=c("Control", "Artemia", "Low complexity", "Medium complexity", "High complexity "))
levels(tab_respiration$food)
str(tab_respiration)

#Statistical analysis - Symbiotic vs Bleached per food option
# The code for S. pistillata is given below. The analysis was carried out in exactly the same way for G. fascicularis and P. lobata. 
# The code for respiration of t2 is given below. The analysis was carried out in exactly the same way net photosynthesis of t2 and gross photosynthesis of t2. 

#Control
#Filter Stylophora pistillata
tab_respiration_Spi_Control <- tab_respiration %>%
  filter(species=="Stylophora pistillata")
#Filter Control food option
tab_respiration_Spi_Control <- tab_respiration_Spi_Control %>%
  filter(food=="Control")
#Filter t2 measurement
tab_respiration_Spi_Control <- tab_respiration_Spi_Control %>%
  filter(measurement=="t2)

#Factor of the analysis
tab_respiration_Spi_Control$Condition = as.factor(tab_respiration_Spi_Control$Condition)

#Shapiro - to take into account: lower than 0.05 no normal distribution so lmer is not possible
shapiro.test(tab_respiration_Spi_Control$respiration) #Shapiro test: p values lower than 0.05 rejected null hypothesis (normal distribution)
#Result: normal distribution
#check outliers - 
outliers <- check_outliers(tab_respiration_Spi_Control$respiration)
which(outliers)
#result: 0

###Check normality
hist(tab_respiration_Spi_Control$respiration, freq = F,
     ylab = "calcification",
     xlab = "Species")
#Result: normal distribution

#lmer model 
model_respiration_Spi_control <- lmer(scale(respiration + 100) ~ Condition + (1|genotype), data= tab_respiration_Spi_Control)
check_singularity(model_respiration_Spi_control)
#Result True
check_normality(model_respiration_Spi_control)
check_heteroscedasticity(model_respiration_Spi_control)
#Result normality ok - ok heterocedasticity
result <- tidy(glht(model_calcification_Spi_control,
                    linfct = mcp(condition = "Tukey"))) %>%
  add_significance("adj.p.value")
result

#dissolved food
#Filter Stylophora pistillata
tab_respiration_Spi_dissolved <- tab_respiration %>%
  filter(species=="Stylophora pistillata")
#Filter dissolved food food option
tab_respiration_Spi_dissolved <- tab_respiration_Spi_dissolved %>%
  filter(food=="dissolved food")
#Filter t2 measurement
tab_respiration_Spi_dissolved <- tab_respiration_Spi_dissolved %>%
  filter(measurement=="t2)

#Factor of the analysis
tab_respiration_Spi_dissolved$Condition = as.factor(tab_respiration_Spi_dissolved$Condition)

#Shapiro - to take into account: lower than 0.05 no normal distribution so lmer is not possible
shapiro.test(tab_respiration_Spi_dissolved$respiration) #Shapiro test: p values lower than 0.05 rejected null hypothesis (normal distribution)
#Result: normal distribution
#check outliers - 
outliers <- check_outliers(tab_respiration_Spi_dissolved$respiration)
which(outliers)
#result: 0

###Check normality
hist(tab_respiration_Spi_dissolved$respiration, freq = F,
     ylab = "calcification",
     xlab = "Species")
#Result: normal distribution

#lmer model 
model_respiration_Spi_dissolved <- lmer(scale(respiration + 100) ~ Condition + (1|genotype), data= tab_respiration_Spi_dissolved)
check_singularity(model_respiration_Spi_dissolved)
#Result True
check_normality(model_respiration_Spi_dissolved)
check_heteroscedasticity(model_respiration_Spi_dissolved)
#Result normality ok - ok heterocedasticity
result <- tidy(glht(model_respiration_Spi_dissolved,
                    linfct = mcp(condition = "Tukey"))) %>%
  add_significance("adj.p.value")
result

#low complexity
#Filter Stylophora pistillata
tab_respiration_Spi_low <- tab_respiration %>%
  filter(species=="Stylophora pistillata")
#Filter low complexity food option
tab_respiration_Spi_low <- tab_respiration_Spi_low %>%
  filter(food=="low complexity")
#Filter t2 measurement
tab_respiration_Spi_low <- tab_respiration_Spi_low %>%
  filter(measurement=="t2)

#Factor of the analysis
tab_respiration_Spi_low$Condition = as.factor(tab_respiration_Spi_low$Condition)

#Shapiro - to take into account: lower than 0.05 no normal distribution so lmer is not possible
shapiro.test(tab_respiration_Spi_low $respiration) #Shapiro test: p values lower than 0.05 rejected null hypothesis (normal distribution)
#Result: normal distribution
#check outliers - 
outliers <- check_outliers(tab_respiration_Spi_low$respiration)
which(outliers)
#result: 0

###Check normality
hist(tab_respiration_Spi_low$respiration, freq = F,
     ylab = "calcification",
     xlab = "Species")
#Result: normal distribution

#lmer model 
model_respiration_Spi_low <- lmer(scale(respiration + 100) ~ Condition + (1|genotype), data= tab_respiration_Spi_low)
check_singularity(model_respiration_Spi_low)
#Result True
check_normality(model_respiration_Spi_low)
check_heteroscedasticity(model_respiration_Spi_low)
#Result normality ok - ok heterocedasticity
result <- tidy(glht(model_respiration_Spi_low,
                    linfct = mcp(condition = "Tukey"))) %>%
  add_significance("adj.p.value")
result

#medium complexity
#Filter Stylophora pistillata
tab_respiration_Spi_medium <- tab_respiration %>%
  filter(species=="Stylophora pistillata")
#Filter medium complexity food option
tab_respiration_Spi_medium <- tab_respiration_Spi_medium %>%
  filter(food=="medium complexity")
#Filter t2 measurement
tab_respiration_Spi_medium <- tab_respiration_Spi_medium %>%
  filter(measurement=="t2)

#Factor of the analysis
tab_respiration_Spi_medium$Condition = as.factor(tab_respiration_Spi_medium$Condition)

#Shapiro - to take into account: lower than 0.05 no normal distribution so lmer is not possible
shapiro.test(tab_respiration_Spi_medium $respiration) #Shapiro test: p values lower than 0.05 rejected null hypothesis (normal distribution)
#Result: normal distribution
#check outliers - 
outliers <- check_outliers(tab_respiration_Spi_medium$respiration)
which(outliers)
#result: 0

###Check normality
hist(tab_respiration_Spi_medium$respiration, freq = F,
     ylab = "calcification",
     xlab = "Species")
#Result: normal distribution

#lmer model 
model_respiration_Spi_medium <- lmer(scale(respiration + 100) ~ Condition + (1|genotype), data= tab_respiration_Spi_medium)
check_singularity(model_respiration_Spi_medium)
#Result True
check_normality(model_respiration_Spi_medium)
check_heteroscedasticity(model_respiration_Spi_medium)
#Result normality ok - ok heterocedasticity
result <- tidy(glht(model_respiration_Spi_medium,
                    linfct = mcp(condition = "Tukey"))) %>%
  add_significance("adj.p.value")
result
      
#High complexity
#Filter Stylophora pistillata
tab_respiration_Spi_high <- tab_respiration %>%
  filter(species=="Stylophora pistillata")
#Filter high complexity food option
tab_respiration_Spi_high <- tab_respiration_Spi_high %>%
  filter(food=="High complexity")
#Filter t2 measurement
tab_respiration_Spi_high <- tab_respiration_Spi_high %>%
  filter(measurement=="t2)

#Factor of the analysis
tab_respiration_Spi_high$Condition = as.factor(tab_respiration_Spi_high$Condition)

#Shapiro - to take into account: lower than 0.05 no normal distribution so lmer is not possible
shapiro.test(tab_respiration_Spi_high$respiration) #Shapiro test: p values lower than 0.05 rejected null hypothesis (normal distribution)
#Result: normal distribution
#check outliers - 
outliers <- check_outliers(tab_respiration_Spi_high$respiration)
which(outliers)
#result: 0

###Check normality
hist(tab_respiration_Spi_high$respiration, freq = F,
     ylab = "calcification",
     xlab = "Species")
#Result: normal distribution

#lmer model 
model_respiration_Spi_high <- lmer(scale(respiration + 100) ~ Condition + (1|genotype), data= tab_respiration_Spi_high)
check_singularity(model_respiration_Spi_high)
#Result True
check_normality(model_respiration_Spi_high)
check_heteroscedasticity(model_respiration_Spi_high)
#Result normality ok - ok heterocedasticity
result <- tidy(glht(model_respiration_Spi_high,
                    linfct = mcp(condition = "Tukey"))) %>%
  add_significance("adj.p.value")
result      

#Statistical analysis - Symbiotic corals per food option
# The code for S. pistillata is given below. The analysis was carried out in exactly the same way for G. fascicularis and P. lobata. 
# The code for respiration on t2 is given below. The analysis was carried out in exactly the same way net photosynthesis t2 and gross photosynthesis t2. 

#Filter Condition = Symbiotic
tab_respiration <- 
 tab_respiration %>% 
  filter(Condition == "Symbiotic") 

#Control
#Filter Stylophora pistillata
tab_respiration_Spi_Control <- tab_respiration %>%
  filter(species=="Stylophora pistillata")
#Filter Control food option
tab_respiration_Spi_Control <- tab_respiration_Spi_Control%>%
  filter(food=="Control")

#Factor of the analysis
tab_respiration_Spi_Contro$food = as.factor(tab_respiration_Spi_Contro$food)

#Shapiro - to take into account: lower than 0.05 no normal distribution so lmer is not possible
shapiro.test(tab_respiration_Spi_Contro$respiration) #Shapiro test: p values lower than 0.05 rejected null hypothesis (normal distribution)
#Result: normal distribution
#check outliers - 
outliers <- check_outliers(tab_respiration_Spi_Contro$respiration)
which(outliers)
#result: 0

#food as a factor
tab_respiration_Spi_Contro$food = as.factor(tab_respiration_Spi_Contro$food)

###Check normality
hist(tab_respiration_Spi_Contro, freq = F,
     ylab = "calcification",
     xlab = "Species")
#Result: normal distribution

#lmer model 
model_respiration_Spi_control <- lmer(scale(calcification + 100) ~ food + (1|genotype), data= tab_respiration_Spi_control)
check_singularity(model_respiration_Spi_control)
#Result True
check_normality(model_respiration_Spi_control)
check_heteroscedasticity(model_respiration_Spi_control)
#Result normality ok - ok heterocedasticity
result <- tidy(glht(model_respiration_Spi_control,
                    linfct = mcp(food = "Tukey"))) %>%
  add_significance("adj.p.value")
result

#dissolved food
#Filter Stylophora pistillata
tab_respiration_Spi_dissolved <- tab_respiration %>%
  filter(species=="Stylophora pistillata")
#Filter dissolved food food option
tab_respiration_Spi_dissolved <- tab_respiration_Spi_dissolved %>%
  filter(food=="dissolved food")

#Factor of the analysis
tab_respiration_Spi_dissolved$food = as.factor(tab_respiration_Spi_dissolved$food)

#Shapiro - to take into account: lower than 0.05 no normal distribution so lmer is not possible
shapiro.test(tab_respiration_Spi_dissolved$respiration) #Shapiro test: p values lower than 0.05 rejected null hypothesis (normal distribution)
#Result: normal distribution
#check outliers - 
outliers <- check_outliers(tab_respiration_Spi_dissolved$respiration)
which(outliers)
#result: 0

#food as a factor
tab_respiration_Spi_dissolved$food = as.factor(tab_respiration_Spi_dissolved$food)

###Check normality
hist(tab_respiration_Spi_dissolved, freq = F,
     ylab = "calcification",
     xlab = "Species")
#Result: normal distribution

#lmer model 
model_respiration_Spi_dissolved <- lmer(scale(calcification + 100) ~ food + (1|genotype), data= tab_respiration_Spi_dissolved)
check_singularity(model_respiration_Spi_dissolved)
#Result True
check_normality(model_respiration_Spi_dissolved)
check_heteroscedasticity(model_respiration_Spi_dissolved)
#Result normality ok - ok heterocedasticity
result <- tidy(glht(model_respiration_Spi_dissolved,
                    linfct = mcp(food = "Tukey"))) %>%
  add_significance("adj.p.value")
result

#low complexity
#Filter Stylophora pistillata
tab_respiration_Spi_low <- tab_respiration %>%
  filter(species=="Stylophora pistillata")
#Filter low complexity food option
tab_respiration_Spi_low  <- tab_respiration_Spi_low  %>%
  filter(food=="low complexity")

#Factor of the analysis
tab_respiration_Spi_low$food = as.factor(tab_respiration_Spi_low$food)

#Shapiro - to take into account: lower than 0.05 no normal distribution so lmer is not possible
shapiro.test(tab_respiration_Spi_low$respiration) #Shapiro test: p values lower than 0.05 rejected null hypothesis (normal distribution)
#Result: normal distribution
#check outliers - 
outliers <- check_outliers(tab_respiration_Spi_low$respiration)
which(outliers)
#result: 0

#food as a factor
tab_respiration_Spi_low$food = as.factor(tab_respiration_Spi_low$food)

###Check normality
hist(tab_respiration_Spi_low, freq = F,
     ylab = "calcification",
     xlab = "Species")
#Result: normal distribution

#lmer model 
model_respiration_Spi_low <- lmer(scale(calcification + 100) ~ food + (1|genotype), data= tab_respiration_Spi_low)
check_singularity(model_respiration_Spi_low)
#Result True
check_normality(model_respiration_Spi_low)
check_heteroscedasticity(model_respiration_Spi_low)
#Result normality ok - ok heterocedasticity
result <- tidy(glht(model_respiration_Spi_low,
                    linfct = mcp(food = "Tukey"))) %>%
  add_significance("adj.p.value")
result

#medium complexity
#Filter Stylophora pistillata
tab_respiration_Spi_medium <- tab_respiration %>%
  filter(species=="Stylophora pistillata")
#Filter medium complexity food option
tab_respiration_Spi_medium  <- tab_respiration_Spi_medium  %>%
  filter(food=="medium complexity")

#Factor of the analysis
tab_respiration_Spi_medium$food = as.factor(tab_respiration_Spi_medium$food)

#Shapiro - to take into account: lower than 0.05 no normal distribution so lmer is not possible
shapiro.test(tab_respiration_Spi_medium$respiration) #Shapiro test: p values lower than 0.05 rejected null hypothesis (normal distribution)
#Result: normal distribution
#check outliers - 
outliers <- check_outliers(tab_respiration_Spi_medium$respiration)
which(outliers)
#result: 0

#food as a factor
tab_respiration_Spi_medium$food = as.factor(tab_respiration_Spi_medium$food)

###Check normality
hist(tab_respiration_Spi_medium, freq = F,
     ylab = "calcification",
     xlab = "Species")
#Result: normal distribution

#lmer model 
model_respiration_Spi_medium <- lmer(scale(calcification + 100) ~ food + (1|genotype), data= tab_respiration_Spi_medium)
check_singularity(model_respiration_Spi_medium)
#Result True
check_normality(model_respiration_Spi_medium)
check_heteroscedasticity(model_respiration_Spi_medium)
#Result normality ok - ok heterocedasticity
result <- tidy(glht(model_respiration_Spi_medium,
                    linfct = mcp(food = "Tukey"))) %>%
  add_significance("adj.p.value")
result

#medium complexity
#Filter Stylophora pistillata
tab_respiration_Spi_medium <- tab_respiration %>%
  filter(species=="Stylophora pistillata")
#Filter medium complexity food option
tab_respiration_Spi_medium  <- tab_respiration_Spi_medium  %>%
  filter(food=="medium complexity")

#Factor of the analysis
tab_respiration_Spi_medium$food = as.factor(tab_respiration_Spi_medium$food)

#Shapiro - to take into account: lower than 0.05 no normal distribution so lmer is not possible
shapiro.test(tab_respiration_Spi_medium$respiration) #Shapiro test: p values lower than 0.05 rejected null hypothesis (normal distribution)
#Result: normal distribution
#check outliers - 
outliers <- check_outliers(tab_respiration_Spi_medium$respiration)
which(outliers)
#result: 0

#food as a factor
tab_respiration_Spi_medium$food = as.factor(tab_respiration_Spi_medium$food)

###Check normality
hist(tab_respiration_Spi_medium, freq = F,
     ylab = "calcification",
     xlab = "Species")
#Result: normal distribution

#lmer model 
model_respiration_Spi_medium <- lmer(scale(calcification + 100) ~ food + (1|genotype), data= tab_respiration_Spi_medium)
check_singularity(model_respiration_Spi_medium)
#Result True
check_normality(model_respiration_Spi_medium)
check_heteroscedasticity(model_respiration_Spi_medium)
#Result normality ok - ok heterocedasticity
result <- tidy(glht(model_respiration_Spi_medium,
                    linfct = mcp(food = "Tukey"))) %>%
  add_significance("adj.p.value")
result

#high complexity
#Filter Stylophora pistillata
tab_respiration_Spi_high <- tab_respiration %>%
  filter(species=="Stylophora pistillata")
#Filter high complexity food option
tab_respiration_Spi_high <- tab_respiration_Spi_high  %>%
  filter(food=="high complexity")

#Factor of the analysis
tab_respiration_Spi_high$food = as.factor(tab_respiration_Spi_high$food)

#Shapiro - to take into account: lower than 0.05 no normal distribution so lmer is not possible
shapiro.test(tab_respiration_Spi_high$respiration) #Shapiro test: p values lower than 0.05 rejected null hypothesis (normal distribution)
#Result: normal distribution
#check outliers - 
outliers <- check_outliers(tab_respiration_Spi_high$respiration)
which(outliers)
#result: 0

#food as a factor
tab_respiration_Spi_high$food = as.factor(tab_respiration_Spi_high$food)

###Check normality
hist(tab_respiration_Spi_high, freq = F,
     ylab = "calcification",
     xlab = "Species")
#Result: normal distribution

#lmer model 
model_respiration_Spi_high <- lmer(scale(calcification + 100) ~ food + (1|genotype), data= tab_respiration_Spi_high)
check_singularity(model_respiration_Spi_high)
#Result True
check_normality(model_respiration_Spi_high)
check_heteroscedasticity(model_respiration_Spi_high)
#Result normality ok - ok heterocedasticity
result <- tidy(glht(model_respiration_Spi_high,
                    linfct = mcp(food = "Tukey"))) %>%
  add_significance("adj.p.value")
result

#Statistical analysis - Bleached corals per food option
# The code for S. pistillata is given below. The analysis was carried out in exactly the same way for G. fascicularis and P. lobata. 
# The code for respiration on t2 is given below. 

#Filter Condition = Bleached
tab_respiration <- 
 tab_respiration %>% 
  filter(Condition == "Bleached") 

#Control
#Filter Stylophora pistillata
tab_respiration_Spi_Control <- tab_respiration %>%
  filter(species=="Stylophora pistillata")
#Filter Control food option
tab_respiration_Spi_Control <- tab_respiration_Spi_Control%>%
  filter(food=="Control")

#Factor of the analysis
tab_respiration_Spi_Contro$food = as.factor(tab_respiration_Spi_Contro$food)

#Shapiro - to take into account: lower than 0.05 no normal distribution so lmer is not possible
shapiro.test(tab_respiration_Spi_Contro$respiration) #Shapiro test: p values lower than 0.05 rejected null hypothesis (normal distribution)
#Result: normal distribution
#check outliers - 
outliers <- check_outliers(tab_respiration_Spi_Contro$respiration)
which(outliers)
#result: 0

#food as a factor
tab_respiration_Spi_Contro$food = as.factor(tab_respiration_Spi_Contro$food)

###Check normality
hist(tab_respiration_Spi_Contro, freq = F,
     ylab = "calcification",
     xlab = "Species")
#Result: normal distribution

#lmer model 
model_respiration_Spi_control <- lmer(scale(calcification + 100) ~ food + (1|genotype), data= tab_respiration_Spi_control)
check_singularity(model_respiration_Spi_control)
#Result True
check_normality(model_respiration_Spi_control)
check_heteroscedasticity(model_respiration_Spi_control)
#Result normality ok - ok heterocedasticity
result <- tidy(glht(model_respiration_Spi_control,
                    linfct = mcp(food = "Tukey"))) %>%
  add_significance("adj.p.value")
result

#dissolved food
#Filter Stylophora pistillata
tab_respiration_Spi_dissolved <- tab_respiration %>%
  filter(species=="Stylophora pistillata")
#Filter dissolved food food option
tab_respiration_Spi_dissolved <- tab_respiration_Spi_dissolved %>%
  filter(food=="dissolved food")

#Factor of the analysis
tab_respiration_Spi_dissolved$food = as.factor(tab_respiration_Spi_dissolved$food)

#Shapiro - to take into account: lower than 0.05 no normal distribution so lmer is not possible
shapiro.test(tab_respiration_Spi_dissolved$respiration) #Shapiro test: p values lower than 0.05 rejected null hypothesis (normal distribution)
#Result: normal distribution
#check outliers - 
outliers <- check_outliers(tab_respiration_Spi_dissolved$respiration)
which(outliers)
#result: 0

#food as a factor
tab_respiration_Spi_dissolved$food = as.factor(tab_respiration_Spi_dissolved$food)

###Check normality
hist(tab_respiration_Spi_dissolved, freq = F,
     ylab = "calcification",
     xlab = "Species")
#Result: normal distribution

#lmer model 
model_respiration_Spi_dissolved <- lmer(scale(calcification + 100) ~ food + (1|genotype), data= tab_respiration_Spi_dissolved)
check_singularity(model_respiration_Spi_dissolved)
#Result True
check_normality(model_respiration_Spi_dissolved)
check_heteroscedasticity(model_respiration_Spi_dissolved)
#Result normality ok - ok heterocedasticity
result <- tidy(glht(model_respiration_Spi_dissolved,
                    linfct = mcp(food = "Tukey"))) %>%
  add_significance("adj.p.value")
result

#low complexity
#Filter Stylophora pistillata
tab_respiration_Spi_low <- tab_respiration %>%
  filter(species=="Stylophora pistillata")
#Filter low complexity food option
tab_respiration_Spi_low  <- tab_respiration_Spi_low  %>%
  filter(food=="low complexity")

#Factor of the analysis
tab_respiration_Spi_low$food = as.factor(tab_respiration_Spi_low$food)

#Shapiro - to take into account: lower than 0.05 no normal distribution so lmer is not possible
shapiro.test(tab_respiration_Spi_low$respiration) #Shapiro test: p values lower than 0.05 rejected null hypothesis (normal distribution)
#Result: normal distribution
#check outliers - 
outliers <- check_outliers(tab_respiration_Spi_low$respiration)
which(outliers)
#result: 0

#food as a factor
tab_respiration_Spi_low$food = as.factor(tab_respiration_Spi_low$food)

###Check normality
hist(tab_respiration_Spi_low, freq = F,
     ylab = "calcification",
     xlab = "Species")
#Result: normal distribution

#lmer model 
model_respiration_Spi_low <- lmer(scale(calcification + 100) ~ food + (1|genotype), data= tab_respiration_Spi_low)
check_singularity(model_respiration_Spi_low)
#Result True
check_normality(model_respiration_Spi_low)
check_heteroscedasticity(model_respiration_Spi_low)
#Result normality ok - ok heterocedasticity
result <- tidy(glht(model_respiration_Spi_low,
                    linfct = mcp(food = "Tukey"))) %>%
  add_significance("adj.p.value")
result

#medium complexity
#Filter Stylophora pistillata
tab_respiration_Spi_medium <- tab_respiration %>%
  filter(species=="Stylophora pistillata")
#Filter medium complexity food option
tab_respiration_Spi_medium  <- tab_respiration_Spi_medium  %>%
  filter(food=="medium complexity")

#Factor of the analysis
tab_respiration_Spi_medium$food = as.factor(tab_respiration_Spi_medium$food)

#Shapiro - to take into account: lower than 0.05 no normal distribution so lmer is not possible
shapiro.test(tab_respiration_Spi_medium$respiration) #Shapiro test: p values lower than 0.05 rejected null hypothesis (normal distribution)
#Result: normal distribution
#check outliers - 
outliers <- check_outliers(tab_respiration_Spi_medium$respiration)
which(outliers)
#result: 0

#food as a factor
tab_respiration_Spi_medium$food = as.factor(tab_respiration_Spi_medium$food)

###Check normality
hist(tab_respiration_Spi_medium, freq = F,
     ylab = "calcification",
     xlab = "Species")
#Result: normal distribution

#lmer model 
model_respiration_Spi_medium <- lmer(scale(calcification + 100) ~ food + (1|genotype), data= tab_respiration_Spi_medium)
check_singularity(model_respiration_Spi_medium)
#Result True
check_normality(model_respiration_Spi_medium)
check_heteroscedasticity(model_respiration_Spi_medium)
#Result normality ok - ok heterocedasticity
result <- tidy(glht(model_respiration_Spi_medium,
                    linfct = mcp(food = "Tukey"))) %>%
  add_significance("adj.p.value")
result

#medium complexity
#Filter Stylophora pistillata
tab_respiration_Spi_medium <- tab_respiration %>%
  filter(species=="Stylophora pistillata")
#Filter medium complexity food option
tab_respiration_Spi_medium  <- tab_respiration_Spi_medium  %>%
  filter(food=="medium complexity")

#Factor of the analysis
tab_respiration_Spi_medium$food = as.factor(tab_respiration_Spi_medium$food)

#Shapiro - to take into account: lower than 0.05 no normal distribution so lmer is not possible
shapiro.test(tab_respiration_Spi_medium$respiration) #Shapiro test: p values lower than 0.05 rejected null hypothesis (normal distribution)
#Result: normal distribution
#check outliers - 
outliers <- check_outliers(tab_respiration_Spi_medium$respiration)
which(outliers)
#result: 0

#food as a factor
tab_respiration_Spi_medium$food = as.factor(tab_respiration_Spi_medium$food)

###Check normality
hist(tab_respiration_Spi_medium, freq = F,
     ylab = "calcification",
     xlab = "Species")
#Result: normal distribution

#lmer model 
model_respiration_Spi_medium <- lmer(scale(calcification + 100) ~ food + (1|genotype), data= tab_respiration_Spi_medium)
check_singularity(model_respiration_Spi_medium)
#Result True
check_normality(model_respiration_Spi_medium)
check_heteroscedasticity(model_respiration_Spi_medium)
#Result normality ok - ok heterocedasticity
result <- tidy(glht(model_respiration_Spi_medium,
                    linfct = mcp(food = "Tukey"))) %>%
  add_significance("adj.p.value")
result

#high complexity
#Filter Stylophora pistillata
tab_respiration_Spi_high <- tab_respiration %>%
  filter(species=="Stylophora pistillata")
#Filter high complexity food option
tab_respiration_Spi_high <- tab_respiration_Spi_high  %>%
  filter(food=="high complexity")

#Factor of the analysis
tab_respiration_Spi_high$food = as.factor(tab_respiration_Spi_high$food)

#Shapiro - to take into account: lower than 0.05 no normal distribution so lmer is not possible
shapiro.test(tab_respiration_Spi_high$respiration) #Shapiro test: p values lower than 0.05 rejected null hypothesis (normal distribution)
#Result: normal distribution
#check outliers - 
outliers <- check_outliers(tab_respiration_Spi_high$respiration)
which(outliers)
#result: 0

#food as a factor
tab_respiration_Spi_high$food = as.factor(tab_respiration_Spi_high$food)

###Check normality
hist(tab_respiration_Spi_high, freq = F,
     ylab = "calcification",
     xlab = "Species")
#Result: normal distribution

#lmer model 
model_respiration_Spi_high <- lmer(scale(calcification + 100) ~ food + (1|genotype), data= tab_respiration_Spi_high)
check_singularity(model_respiration_Spi_high)
#Result True
check_normality(model_respiration_Spi_high)
check_heteroscedasticity(model_respiration_Spi_high)
#Result normality ok - ok heterocedasticity
result <- tidy(glht(model_respiration_Spi_high,
                    linfct = mcp(food = "Tukey"))) %>%
  add_significance("adj.p.value")
result

# Effect size analysis  ---------------------------------------------------
# The code for S. pistillata is given below. The analysis was carried out in exactly the same way for G. fascicularis and P. lobata. 
# The code for respiration is given below.
# The code for symbiotic is given below.

#Filter per species
respiration_spi <- tab_respiration %>% 
  filter(species=="Stylophora pistillata")  

#Filter per condition
respiration_spi <- tab_respiration %>% 
  filter(condition=="Symbiotic") 

#Filter per food option
#Control
respiration_spi_control <- respiration_spi %>% 
  filter(food=="control") 

#Effect size

# Calculate Hedges' g using the cohen.d function.
# Interpretation: results close to 0 (+ or -) indicate that the difference is small and vice versa.
resul <- cohen.d(respiration ~ condition, data = respiration_spi_control, hedges.correction = TRUE)
g_value <- result$estimate
ci <- result$conf.int
result
levels(respiration_spi_control$condition)
#"Bleached"  "Symbiotic"

#dissolved food
respiration_spi_dissolved <- respiration_spi %>% 
  filter(food=="dissolved food") 

#Effect size

# Calculate Hedges' g using the cohen.d function.
# Interpretation: results close to 0 (+ or -) indicate that the difference is small and vice versa.
resul <- cohen.d(respiration ~ condition, data = respiration_spi_dissolved, hedges.correction = TRUE)
g_value <- result$estimate
ci <- result$conf.int
result
levels(respiration_spi_dissolved$condition)
#"Bleached"  "Symbiotic"

#low complexity
respiration_spi_low <- respiration_spi %>% 
  filter(food=="low complexity") 

#Effect size

# Calculate Hedges' g using the cohen.d function.
# Interpretation: results close to 0 (+ or -) indicate that the difference is small and vice versa.
resul <- cohen.d(respiration ~ condition, data = respiration_spi_low, hedges.correction = TRUE)
g_value <- result$estimate
ci <- result$conf.int
result
levels(respiration_spi_low$condition)
#"Bleached"  "Symbiotic"

#medium complexity
respiration_spi_medium <- respiration_spi %>% 
  filter(food=="medium complexity") 

#Effect size

# Calculate Hedges' g using the cohen.d function.
# Interpretation: results close to 0 (+ or -) indicate that the difference is small and vice versa.
resul <- cohen.d(respiration ~ condition, data = respiration_spi_medium, hedges.correction = TRUE)
g_value <- result$estimate
ci <- result$conf.int
result
levels(respiration_spi_medium$condition)
#"Bleached"  "Symbiotic"

#high complexity
respiration_spi_high <- respiration_spi %>% 
  filter(food=="high complexity") 

#Effect size

# Calculate Hedges' g using the cohen.d function.
# Interpretation: results close to 0 (+ or -) indicate that the difference is small and vice versa.
resul <- cohen.d(respiration ~ condition, data = respiration_spi_high, hedges.correction = TRUE)
g_value <- result$estimate
ci <- result$conf.int
result
levels(respiration_spi_high$condition)
#"Bleached"  "Symbiotic"

# The code for Bleached is given below.

#Filter per species
respiration_spi <- tab_respiration %>% 
  filter(species=="Stylophora pistillata")  

#Filter per condition
respiration_spi <- tab_respiration %>% 
  filter(condition=="Bleached") 

#Filter per food option
#Control
respiration_spi_control <- respiration_spi %>% 
  filter(food=="control") 

#Effect size

# Calculate Hedges' g using the cohen.d function.
# Interpretation: results close to 0 (+ or -) indicate that the difference is small and vice versa.
resul <- cohen.d(respiration ~ condition, data = respiration_spi_control, hedges.correction = TRUE)
g_value <- result$estimate
ci <- result$conf.int
result
levels(respiration_spi_control$condition)
#"Bleached"  "Symbiotic"

#dissolved food
respiration_spi_dissolved <- respiration_spi %>% 
  filter(food=="dissolved food") 

#Effect size

# Calculate Hedges' g using the cohen.d function.
# Interpretation: results close to 0 (+ or -) indicate that the difference is small and vice versa.
resul <- cohen.d(respiration ~ condition, data = respiration_spi_dissolved, hedges.correction = TRUE)
g_value <- result$estimate
ci <- result$conf.int
result
levels(respiration_spi_dissolved$condition)
#"Bleached"  "Symbiotic"

#low complexity
respiration_spi_low <- respiration_spi %>% 
  filter(food=="low complexity") 

#Effect size

# Calculate Hedges' g using the cohen.d function.
# Interpretation: results close to 0 (+ or -) indicate that the difference is small and vice versa.
resul <- cohen.d(respiration ~ condition, data = respiration_spi_low, hedges.correction = TRUE)
g_value <- result$estimate
ci <- result$conf.int
result
levels(respiration_spi_low$condition)
#"Bleached"  "Symbiotic"

#medium complexity
respiration_spi_medium <- respiration_spi %>% 
  filter(food=="medium complexity") 

#Effect size

# Calculate Hedges' g using the cohen.d function.
# Interpretation: results close to 0 (+ or -) indicate that the difference is small and vice versa.
resul <- cohen.d(respiration ~ condition, data = respiration_spi_medium, hedges.correction = TRUE)
g_value <- result$estimate
ci <- result$conf.int
result
levels(respiration_spi_medium$condition)
#"Bleached"  "Symbiotic"

#high complexity
respiration_spi_high <- respiration_spi %>% 
  filter(food=="high complexity") 

#Effect size

# Calculate Hedges' g using the cohen.d function.
# Interpretation: results close to 0 (+ or -) indicate that the difference is small and vice versa.
resul <- cohen.d(respiration ~ condition, data = respiration_spi_high, hedges.correction = TRUE)
g_value <- result$estimate
ci <- result$conf.int
result
levels(respiration_spi_high$condition)
#"Bleached"  "Symbiotic"

# Plot Symbiotic vs bleached per food option ----------------------------------------------------
# The code for S. pistillata is given below. The plot was carried out in exactly the same way for G. fascicularis and P. lobata. 
# The code for respiration is given below. 

#Boxplot
#Filter specie
respiration_spi <- tab_respiration %>% 
  filter(species=="Stylophora pistillata")

#x labels 
a <- 18
#Y lebels 
b <- 17
c <- 17
#boxplot
d <- 0.3
#EZ Y labels
e <- 15

# Define specific colours for each level of 'food'
food_colors <- c('Control' = "#FFB703", 
                 'Dissolved food' = "#FB8500", 
                 'Low complexity' = "#5CACEE", 
                 'Medium complexity' = "#219EBC",	
                 'High complexity ' = "#4682B4")

#Significance in asterisks *
data.segm_1 <-data.frame(x=1,y=65,xend=2,yend=65,
food= factor("Dissolved food"))
data.segm_2 <-data.frame(x=1,y=65,xend=2,yend=65,
                         food= factor("Low complexity"))
data.segm_3 <-data.frame(x=1,y=65,xend=2,yend=65,
                         food= factor("Medium complexity"))
data.segm_4 <-data.frame(x=1,y=65,xend=2,yend=65,
                         food= factor("High complexity "))

df_segments_1.1 <-data.frame(x=1.5,y=65.5, label = c("***"),
food= factor("Dissolved food"))
df_segments_2.1 <-data.frame(x=1.5,y=65.5, label = c("***"),
                             food= factor("Low complexity"))
df_segments_3.1 <-data.frame(x=1.5,y=65.5, label = c("*"),
                             food= factor("Medium complexity"))
df_segments_4.1 <-data.frame(x=1.5,y=65.5, label = c("**"),
                             food= factor("High complexity "))

# Define colours with transparency for "Bleached"
food_colors_transparent <- sapply(food_colors, function(color) {
  adjustcolor(color, alpha.f = 0.5)})

# Add transparency column to the dataframe
respiration_spi <- respiration_spix %>%
  mutate(alpha = ifelse(Condition == "Bleached", 0.5, 1),
         fill_color = ifelse(Condition == "Bleached", food_colors_transparent[food], food_colors[food]))

#Plot - Boxplot
plot_spi_box <- ggplot(data = respiration_spi) +
  geom_boxplot(aes(x = Condition, 
                   y = respiration, 
                   fill = food, 
                   alpha = alpha),
               position = position_dodge(width = 0.8), 
               width = 0.99, outlier.shape = NA, 
               lwd = 0.3, color = "black") +
  geom_jitter(aes(x = Condition, 
                  y = respiration,
                  fill = food,
                  alpha = ifelse(Condition == "Bleached", 0.5, 1)), # Here the transparency of the dots is adjusted
              pch = 21, size = 3, stroke = 0.3, 
              position = position_jitterdodge(jitter.width = 0.2, dodge.width = 0.8)) +
  facet_grid2( ~ food, scales = "free_y") +
  geom_segment(data=data.segm_1,
  aes(x=x,y=y,yend=yend,xend=xend),size= 0.7, color = "black")+
   geom_text(data= df_segments_1.1, aes(x = x, y=y, label=label), size= 8)+
   geom_segment(data=data.segm_2,
               aes(x=x,y=y,yend=yend,xend=xend),size= 0.7, color = "black")+
  geom_text(data= df_segments_2.1, aes(x = x, y=y, label=label), size= 8)+
  geom_segment(data=data.segm_3,
               aes(x=x,y=y,yend=yend,xend=xend),size= 0.7, color = "black")+
  geom_text(data= df_segments_3.1, aes(x = x, y=y, label=label), size= 8)+
  geom_segment(data=data.segm_4,
               aes(x=x,y=y,yend=yend,xend=xend),size= 0.7, color = "black")+
  geom_text(data= df_segments_4.1, aes(x = x, y=y, label=label), size= 8)+
    scale_fill_manual(values = food_colors) +
  scale_y_continuous(limits = c(0, 100), breaks = c(0,20,40,60,80, 100))+ 
  scale_alpha_continuous(range = c(0.5, 1)) +  # Define the transparency range
  theme_minimal() +
  theme(
    legend.position = "none",
    legend.justification = "center", 
    legend.direction = "horizontal",
    legend.title = element_text(size = a),
    legend.text = element_text(size = b),
    axis.ticks = element_blank(),
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    panel.background = element_blank(), 
    panel.spacing = unit(0, "lines"),  # Minimise the space between facets
    axis.line.x = element_line(colour = "black", linewidth = 0.5),
    axis.line.y = element_line(colour = "black", linewidth = 0.5),
    axis.text.x = element_blank(),
    strip.text.x = element_blank(),
    plot.title = element_text(face = "italic",hjust = 0.5, size = (a)),
    axis.text.y = element_text(size=b), 
    axis.title.x = element_blank(),
    axis.title.y = element_text(size = a),
    # Change horizontal spacing between facets
    #panel.spacing.x = unit(1, "cm"), 
    panel.spacing.x = unit(0, "null"),
    plot.margin = unit(c(0,0,0,0), "cm")) + # top, right, bottom, left
  ggtitle("Galaxea fascicularis") + 
 ylab(expression(atop(Respiration, (µg~O[2]~cm^{-2}~h^{-1}))))+
  scale_x_discrete(expand=expand_scale(add=1))

print(plot_spi_box)

# save
saveRDS(object = plot_glx , file = "Output/Spi_respiration_Condition.rds" )
plot_spi_box <- readRDS("Output/Spi_respiration_Condition.rds")

#effect size
#Filter species
tab_spi_ez <- tab_ez %>% 
  filter(species=="Stylophora pistillata") 

#plot
plot_ez_spi <- ggplot(tab_ez, aes(x = factor(1), y = Estimate, ymin = Lower.CI, ymax = Upper.CI)) +
  geom_pointrange(size = 1.2, color = food_colors, linewidth = 1) +
  geom_hline(yintercept = 0, linetype = "solid", color = "black", size = 0.5) +  
  facet_wrap(~food, scales = "free_x", nrow = 1) +  
  labs(
    title = "",
    x = "",
    y = "Hedges g"
  ) +
  theme_minimal() +
  theme(
    axis.text.x = element_blank(),
    axis.title.y = element_text(size = e),
    axis.text.y = element_text(size = e),
    strip.text = element_blank(),
    panel.grid.major.y = element_blank(), 
    panel.grid.minor.y = element_blank(),  
    axis.line.x = element_blank(),
    axis.line.y = element_line(colour = "black", linewidth = 0.5), 
    strip.background = element_blank(),  
    panel.spacing = unit(0, "lines"),  
    plot.margin = margin(0, 0, 0, 0)
    #plot.margin = margin(-3, 29.9, 0, 24) 
  ) +
  coord_cartesian(clip = 'off')  

# Adjusts the y-axis limits and breaks.
plot_ez_spi <- plot_ez_spi + scale_y_continuous(
  expand = c(0.0, 0.0),
  limits = c(-5.0, 0.4),  
  breaks = c(0.0,-2.5, -5.0)  
)
plot(plot_ez_spi)

# save
saveRDS(object = plot_ez_spi, file = "Output/EZ_spi_respiration_Condition.rds" )
plot_ez_spi <- readRDS("Output/EZ_spi_respiration_Condition.rds")

#Join plots
#Call plots
#Spi boxplot respiration
plot_spi_box <- readRDS("Output/Spi_respiration_Condition.rds")
plot_spi_box
#Spi EZ respiration
plot_ez_spi <- readRDS("Output/EZ_spi_respiration_Condition.rds")
plot_ez_spi

#Summary plot
#The final code with all plots of Symbiotic corals is displayed.

summaryplot <- ggarrange(
  plot_glx_net, plot_pl_net, plot_spi_net, 
  plot_ezglx_net, plot_ezpl_net, plot_ezspi_net, 
  
  plot_glx_res, plot_pl_res,plot_spi_res,
  plot_ezglx_res,plot_ezpl_res, plot_ezspi_res,
  
  plot_glx_gross, plot_pl_gross,plot_spi_gross,
  plot_ezglx_gross,plot_ezpl_gross, plot_ezspi_gross,
  
  labels = c("A", "B", "C", "D", "E", "F","G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R"),
  font.label = list(size = 16, color = "black"),
  hjust = -0.5, 
  vjust = 1.5,   
  align = "v", 
  nrow = 6,      
  ncol = 3,    
  heights = c(5, 2.6,5,2.6, 5, 2.6), 
  widths = c(1, 1, 1)
  
)

summaryplot

# Save 
ggsave("Output/Summaryplot_ps.png", plot = summaryplot,
       scale = 1, width = 40, height = 44, units = c("cm"),
       dpi = 600, limitsize = FALSE)

### The End

