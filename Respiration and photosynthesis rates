respiration and photosynthesis rates
## Coral symbiotic respiration and photosynthesis rates
# Bleached corals Respiration ---------------------------------
# Entire Data analysis related to the respiration and photosynthesis rates
# these variables were standardized for surface area

## Upload data tables ---------------------------------------------------
tab_res <- read.csv2("C:/Users/Maria/Documents/Maria Antonieta/Second_Manuscript/Data/respi3.csv", dec=".", sep = ",", header=T) 

#First we calculate and extract necessary information 
#from the table to make the data analysis easier
#analysis was performed for t0 - t1 - t2

#t0
tab_res <- data.frame(tab_res)
tab_res_t0 <- filter(tab_res, measurement == "t0")

tab_incubations_t0 <- tab_res_t0 %>% 
  mutate(day = as.numeric(as.factor(date)),  #adds column for day as number, converted from the date
         light_diff_t0 = (o2_end_light - o2_start_light)/time_ligth*60,  #difference in O2 per h
         dark_diff_t0 = (o2_end_dark - o2_start_dark)/time_dark*60,
         waterVolume_t0 = 1005.011 - (water_volume / 1000), #calculate water Volume_t1 in jars
         waterVolume_t0 = replace_na(waterVolume_t0,1005.011), #replace NAs in controls with Volume_t1 of jar
         light_O2_perL_t0 = light_diff_t0/waterVolume_t0*1000,
         dark_O2_perL_t0 =  dark_diff_t0/waterVolume_t0*1000)
#t1
tab_res_t1 <- filter(tab_res, measurement == "t1")
tab_incubations_t1 <- tab_res_t1 %>% 
  mutate(day = as.numeric(as.factor(date)),  #adds column for day as number, converted from the date
         light_diff_t1 = (o2_end_light - o2_start_light)/time_ligth*60,  #difference in O2 per h
         dark_diff_t1 = (o2_end_dark - o2_start_dark)/time_dark*60,
         waterVolume_t1 = 1005.011 - (water_volume / 1000), #calculate water Volume_t1 in jars
         waterVolume_t1 = replace_na(waterVolume_t1,1005.011), #replace NAs in controls with Volume_t1 of jar
         light_O2_perL_t1 = light_diff_t1/waterVolume_t1*1000,
         dark_O2_perL_t1 =  dark_diff_t1/waterVolume_t1*1000)

#t2
tab_res_t2 <- filter(tab_res, measurement == "t2")

tab_incubations_t2 <- tab_res_t2 %>% 
  mutate(day = as.numeric(as.factor(date)),  #adds column for day as number, converted from the date
         light_diff_t2 = (o2_end_light - o2_start_light)/time_ligth*60,  #difference in O2 per h
         dark_diff_t2 = (o2_end_dark - o2_start_dark)/time_dark*60,
         waterVolume_t2 = 1005.011 - (water_volume / 1000), #calculate water Volume_t1 in jars
         waterVolume_t2 = replace_na(waterVolume_t2,1005.011), #replace NAs in controls with Volume_t1 of jar
         light_O2_perL_t2 = light_diff_t2/waterVolume_t2*1000,
         dark_O2_perL_t2 =  dark_diff_t2/waterVolume_t2*1000)

#save
write.table(tab_incubations_t0, sep = ";", 
            "Output/tab_incubations_t0.csv")
write.table(tab_incubations_t1, sep = ";", 
            "Output/tab_incubations_t1.csv")
write.table(tab_incubations_t2, sep = ";", 
            "Output/tab_incubations_t2.csv")

#Calculate means from control incubations separated by 
#light and dark incubation 

#t0
control_rates_light_t0 <-
  tab_incubations_t0 %>%
  filter(fragment=="control") %>% 
  group_by(day) %>%
  get_summary_stats(light_O2_perL, type = "mean_sd") %>% 
  rename(con_light_O2_perL = mean)  %>% 
  select(day, con_light_O2_perL)  

control_rates_dark_t0 <-
  tab_incubations_t0 %>%
  filter(fragment=="control") %>% 
  group_by(day) %>%
  get_summary_stats(dark_O2_perL, type = "mean_sd") %>% 
  rename(con_dark_O2_perL = mean) %>% 
  select(day, con_dark_O2_perL)

# Merge light and dark controls together
control <- merge(control_rates_light_t0, control_rates_dark_t0, by="day", all = TRUE)
#clean
tab_psrate_t0 <- tab_incubations_t0 %>% 
  filter(fragment!="control") %>% 
  select(fragment, species,day,measurement,food, genotype, state, food,surf, light_O2_perL, dark_O2_perL)

# Add controls as row behind data from fragments
tab_psrate_t0 <- merge(tab_psrate_t0, control, by="day", all = TRUE)

# Subtract controls from incubations and standardize to 
#Surface_t1 area of the fragment
tab_psrate_t0 <- tab_psrate_t0 %>% 
  mutate(light_O2_perL_corrected = light_O2_perL - con_light_O2_perL, #subtract controls
         dark_O2_perL_corrected = dark_O2_perL - con_dark_O2_perL, 
         light_O2_perL_percm2 = light_O2_perL_corrected/(surf/100), #correct for Surface_t1 area
         dark_O2_perL_percm2 = dark_O2_perL_corrected/(surf/100), 
         net_ps = light_O2_perL_percm2*1000, #convert to µmO2
         respiration = (dark_O2_perL_percm2*1000)*-1,# convert to consumed oxygen to positive values
         gross_ps = net_ps + respiration) %>% 
  select(fragment, genotype,species,state,measurement, food, day, net_ps, respiration, gross_ps)

#save
write.table(tab_psrate_t0, sep = ";", "Output/Tab_photosynthesisrates_processed_t0.csv")
datatable(tab_psrate_t0, caption = "Table 2: Tab_photosynthesisrates_processed_t0.")

#t1
tab_incubations_t1 <- filter(tab_incubations, measurement == "t1")

control_rates_light_t1 <-
  tab_incubations_t1 %>%
  filter(fragment=="control") %>% 
  group_by(day) %>%
  get_summary_stats(light_O2_perL, type = "mean_sd") %>% 
  rename(con_light_O2_perL = mean)  %>% 
  select(day, con_light_O2_perL)  

control_rates_dark_t1 <-
  tab_incubations_t1 %>%
  filter(fragment=="control") %>% 
  group_by(day) %>%
  get_summary_stats(dark_O2_perL, type = "mean_sd") %>% 
  rename(con_dark_O2_perL = mean) %>% 
  select(day, con_dark_O2_perL)

# Merge light and dark controls together
control <- merge(control_rates_light_t1, control_rates_dark_t1, by="day", all = TRUE)
tab_psrate_t1 <- tab_incubations_t1 %>% 
  filter(fragment!="control") %>% 
  select(fragment, species,day,measurement,food, genotype, state, food,surf, light_O2_perL, dark_O2_perL)

# Add controls as row behind data from fragments
tab_psrate_t1 <- merge(tab_psrate_t1, control, by="day", all = TRUE)
# Subtract controls from incubations and standardize to 
#Surface_t1 area of the fragment
tab_psrate_t1 <- tab_psrate_t1 %>% 
  mutate(light_O2_perL_corrected = light_O2_perL - con_light_O2_perL, #subtract controls
         dark_O2_perL_corrected = dark_O2_perL - con_dark_O2_perL, 
         light_O2_perL_percm2 = light_O2_perL_corrected/(surf/100), #correct for Surface_t1 area
         dark_O2_perL_percm2 = dark_O2_perL_corrected/(surf/100), 
         net_ps = light_O2_perL_percm2*1000, #convert to µmO2
         respiration = (dark_O2_perL_percm2*1000)*-1,# convert to consumed oxygen to positive values
         gross_ps = net_ps + respiration) %>% 
  select(fragment, genotype, species, state,measurement,food, day, net_ps, respiration, gross_ps)

#Save
write.table(tab_psrate_t1, sep = ";", "Output/Tab_photosynthesisrates_processed_t1.csv")
datatable(tab_psrate_t1, caption = "Table 2: Tab_photosynthesisrates_processed_t1.")

#t2
tab_incubations_t2 <- filter(tab_incubations, measurement == "t2")

control_rates_light_t2 <-
  tab_incubations_t2 %>%
  filter(fragment=="control") %>% 
  group_by(day) %>%
  get_summary_stats(light_O2_perL, type = "mean_sd") %>% 
  rename(con_light_O2_perL = mean)  %>% 
  select(day, con_light_O2_perL)  

control_rates_dark_t2 <-
  tab_incubations_t2 %>%
  filter(fragment=="control") %>% 
  group_by(day) %>%
  get_summary_stats(dark_O2_perL, type = "mean_sd") %>% 
  rename(con_dark_O2_perL = mean) %>% 
  select(day, con_dark_O2_perL)

# Merge light and dark controls together
control <- merge(control_rates_light_t2, control_rates_dark_t2, by="day", all = TRUE)
tab_psrate_t2 <- tab_incubations_t2 %>% 
  filter(fragment!="control") %>% 
  select(fragment, species,day,measurement,food, genotype, state, food,surf, light_O2_perL, dark_O2_perL)

# Add controls as row behind data from fragments
tab_psrate_t2 <- merge(tab_psrate_t2, control, by="day", all = TRUE)
# Subtract controls from incubations and standardize to 
#Surface_t1 area of the fragment
tab_psrate_t2 <- tab_psrate_t2 %>% 
  mutate(light_O2_perL_corrected = light_O2_perL - con_light_O2_perL, #subtract controls
         dark_O2_perL_corrected = dark_O2_perL - con_dark_O2_perL, 
         light_O2_perL_percm2 = light_O2_perL_corrected/(surf/100), #correct for Surface_t1 area
         dark_O2_perL_percm2 = dark_O2_perL_corrected/(surf/100), 
         net_ps = light_O2_perL_percm2*1000, #convert to µmO2
         respiration = (dark_O2_perL_percm2*1000)*-1,# convert to consumed oxygen to positive values
         gross_ps = net_ps + respiration) %>% 
  select(fragment, genotype, species, state,measurement,food, day, net_ps, respiration, gross_ps)

#save
write.table(tab_psrate_t2, sep = ";", "Output/Tab_photosynthesisrates_processed_t2.csv")
datatable(tab_psrate_t2, caption = "Table 2: Tab_photosynthesisrates_processed_t2.")

# Descriptive statistics ------------------------------------------------
# ----- 1. Explanation of this part of the script ------------------------------------------
# This script focuses on the statistical analyzes of the corals photosynthesis and respiration rates. Respiration and photosynthesis was measured in
#   a) Respiration in Symbiotic and Bleached corals 
#   b) Net photosynthesis of Symbiotic corals
#   c) Gross photosynthesis of Symbiotic corals
# This script builds up on data tables produced before
#   here photosynthesis and respiration rates were calculated at the end of the 13 weeks.
#     t0-t2: week 0 to 13 after the start experiment
# Statistical analyzes will be conducted using LMER 
#   together with a holm adjusted glht summary

# Prepare data for statistical analyzes --------------------------------------------------------
# relevel treatments in all tables
#Variable food as a factor
tab_respiration$food = as.factor(tab_respiration$food)
#re name labels - food
levels(tab_respiration$food)
tab_respiration$food = factor(tab_respiration$food, levels = c(5,2,3,1,4),
                         labels=c("Control", "Artemia", "Low complexity", "Medium complexity", "High complexity "))
levels(tab_respiration$food)
str(tab_respiration)

#Statistical analysis - Symbiotic vs Bleached per food option
# The code for S. pistillata is given below. The analysis was carried out in exactly the same way for G. fascicularis and P. lobata. 
# The code for respiration of t2 is given below. The analysis was carried out in exactly the same way net photosynthesis of t2 and gross photosynthesis of t2. 

#Control
#Filter Stylophora pistillata
tab_respiration_Spi_Control <- tab_respiration %>%
  filter(species=="Stylophora pistillata")
#Filter Control food option
tab_respiration_Spi_Control <- tab_respiration_Spi_Control %>%
  filter(food=="Control")
#Filter t2 measurement
tab_respiration_Spi_Control <- tab_respiration_Spi_Control %>%
  filter(measurement=="t2)

#Factor of the analysis
tab_respiration_Spi_Control$Condition = as.factor(tab_respiration_Spi_Control$Condition)

#Shapiro - to take into account: lower than 0.05 no normal distribution so lmer is not possible
shapiro.test(tab_respiration_Spi_Control$respiration) #Shapiro test: p values lower than 0.05 rejected null hypothesis (normal distribution)
#Result: normal distribution
#check outliers - 
outliers <- check_outliers(tab_respiration_Spi_Control$respiration)
which(outliers)
#result: 0

###Check normality
hist(tab_respiration_Spi_Control$respiration, freq = F,
     ylab = "calcification",
     xlab = "Species")
#Result: normal distribution

#lmer model 
model_respiration_Spi_control <- lmer(scale(respiration + 100) ~ Condition + (1|genotype), data= tab_respiration_Spi_Control)
check_singularity(model_respiration_Spi_control)
#Result True
check_normality(model_respiration_Spi_control)
check_heteroscedasticity(model_respiration_Spi_control)
#Result normality ok - ok heterocedasticity
result <- tidy(glht(model_calcification_Spi_control,
                    linfct = mcp(condition = "Tukey"))) %>%
  add_significance("adj.p.value")
result

#dissolved food
#Filter Stylophora pistillata
tab_respiration_Spi_dissolved <- tab_respiration %>%
  filter(species=="Stylophora pistillata")
#Filter dissolved food food option
tab_respiration_Spi_dissolved <- tab_respiration_Spi_dissolved %>%
  filter(food=="dissolved food")
#Filter t2 measurement
tab_respiration_Spi_dissolved <- tab_respiration_Spi_dissolved %>%
  filter(measurement=="t2)

#Factor of the analysis
tab_respiration_Spi_dissolved$Condition = as.factor(tab_respiration_Spi_dissolved$Condition)

#Shapiro - to take into account: lower than 0.05 no normal distribution so lmer is not possible
shapiro.test(tab_respiration_Spi_dissolved$respiration) #Shapiro test: p values lower than 0.05 rejected null hypothesis (normal distribution)
#Result: normal distribution
#check outliers - 
outliers <- check_outliers(tab_respiration_Spi_dissolved$respiration)
which(outliers)
#result: 0

###Check normality
hist(tab_respiration_Spi_dissolved$respiration, freq = F,
     ylab = "calcification",
     xlab = "Species")
#Result: normal distribution

#lmer model 
model_respiration_Spi_dissolved <- lmer(scale(respiration + 100) ~ Condition + (1|genotype), data= tab_respiration_Spi_dissolved)
check_singularity(model_respiration_Spi_dissolved)
#Result True
check_normality(model_respiration_Spi_dissolved)
check_heteroscedasticity(model_respiration_Spi_dissolved)
#Result normality ok - ok heterocedasticity
result <- tidy(glht(model_respiration_Spi_dissolved,
                    linfct = mcp(condition = "Tukey"))) %>%
  add_significance("adj.p.value")
result

#low complexity
#Filter Stylophora pistillata
tab_respiration_Spi_low <- tab_respiration %>%
  filter(species=="Stylophora pistillata")
#Filter low complexity food option
tab_respiration_Spi_low <- tab_respiration_Spi_low %>%
  filter(food=="low complexity")
#Filter t2 measurement
tab_respiration_Spi_low <- tab_respiration_Spi_low %>%
  filter(measurement=="t2)

#Factor of the analysis
tab_respiration_Spi_low$Condition = as.factor(tab_respiration_Spi_low$Condition)

#Shapiro - to take into account: lower than 0.05 no normal distribution so lmer is not possible
shapiro.test(tab_respiration_Spi_low $respiration) #Shapiro test: p values lower than 0.05 rejected null hypothesis (normal distribution)
#Result: normal distribution
#check outliers - 
outliers <- check_outliers(tab_respiration_Spi_low$respiration)
which(outliers)
#result: 0

###Check normality
hist(tab_respiration_Spi_low$respiration, freq = F,
     ylab = "calcification",
     xlab = "Species")
#Result: normal distribution

#lmer model 
model_respiration_Spi_low <- lmer(scale(respiration + 100) ~ Condition + (1|genotype), data= tab_respiration_Spi_low)
check_singularity(model_respiration_Spi_low)
#Result True
check_normality(model_respiration_Spi_low)
check_heteroscedasticity(model_respiration_Spi_low)
#Result normality ok - ok heterocedasticity
result <- tidy(glht(model_respiration_Spi_low,
                    linfct = mcp(condition = "Tukey"))) %>%
  add_significance("adj.p.value")
result

#medium complexity
#Filter Stylophora pistillata
tab_respiration_Spi_medium <- tab_respiration %>%
  filter(species=="Stylophora pistillata")
#Filter medium complexity food option
tab_respiration_Spi_medium <- tab_respiration_Spi_medium %>%
  filter(food=="medium complexity")
#Filter t2 measurement
tab_respiration_Spi_medium <- tab_respiration_Spi_medium %>%
  filter(measurement=="t2)

#Factor of the analysis
tab_respiration_Spi_medium$Condition = as.factor(tab_respiration_Spi_medium$Condition)

#Shapiro - to take into account: lower than 0.05 no normal distribution so lmer is not possible
shapiro.test(tab_respiration_Spi_medium $respiration) #Shapiro test: p values lower than 0.05 rejected null hypothesis (normal distribution)
#Result: normal distribution
#check outliers - 
outliers <- check_outliers(tab_respiration_Spi_medium$respiration)
which(outliers)
#result: 0

###Check normality
hist(tab_respiration_Spi_medium$respiration, freq = F,
     ylab = "calcification",
     xlab = "Species")
#Result: normal distribution

#lmer model 
model_respiration_Spi_medium <- lmer(scale(respiration + 100) ~ Condition + (1|genotype), data= tab_respiration_Spi_medium)
check_singularity(model_respiration_Spi_medium)
#Result True
check_normality(model_respiration_Spi_medium)
check_heteroscedasticity(model_respiration_Spi_medium)
#Result normality ok - ok heterocedasticity
result <- tidy(glht(model_respiration_Spi_medium,
                    linfct = mcp(condition = "Tukey"))) %>%
  add_significance("adj.p.value")
result
      
#High complexity
#Filter Stylophora pistillata
tab_respiration_Spi_high <- tab_respiration %>%
  filter(species=="Stylophora pistillata")
#Filter high complexity food option
tab_respiration_Spi_high <- tab_respiration_Spi_high %>%
  filter(food=="High complexity")
#Filter t2 measurement
tab_respiration_Spi_high <- tab_respiration_Spi_high %>%
  filter(measurement=="t2)

#Factor of the analysis
tab_respiration_Spi_high$Condition = as.factor(tab_respiration_Spi_high$Condition)

#Shapiro - to take into account: lower than 0.05 no normal distribution so lmer is not possible
shapiro.test(tab_respiration_Spi_high$respiration) #Shapiro test: p values lower than 0.05 rejected null hypothesis (normal distribution)
#Result: normal distribution
#check outliers - 
outliers <- check_outliers(tab_respiration_Spi_high$respiration)
which(outliers)
#result: 0

###Check normality
hist(tab_respiration_Spi_high$respiration, freq = F,
     ylab = "calcification",
     xlab = "Species")
#Result: normal distribution

#lmer model 
model_respiration_Spi_high <- lmer(scale(respiration + 100) ~ Condition + (1|genotype), data= tab_respiration_Spi_high)
check_singularity(model_respiration_Spi_high)
#Result True
check_normality(model_respiration_Spi_high)
check_heteroscedasticity(model_respiration_Spi_high)
#Result normality ok - ok heterocedasticity
result <- tidy(glht(model_respiration_Spi_high,
                    linfct = mcp(condition = "Tukey"))) %>%
  add_significance("adj.p.value")
result      

#Statistical analysis - Symbiotic corals per food option
# The code for S. pistillata is given below. The analysis was carried out in exactly the same way for G. fascicularis and P. lobata. 
# The code for respiration on t2 is given below. The analysis was carried out in exactly the same way net photosynthesis t2 and gross photosynthesis t2. 

#Filter Condition = Symbiotic
tab_respiration <- 
 tab_respiration %>% 
  filter(Condition == "Symbiotic") 

#Control
#Filter Stylophora pistillata
tab_respiration_Spi_Control <- tab_respiration %>%
  filter(species=="Stylophora pistillata")
#Filter Control food option
tab_respiration_Spi_Control <- tab_respiration_Spi_Control%>%
  filter(food=="Control")

#Factor of the analysis
tab_respiration_Spi_Contro$food = as.factor(tab_respiration_Spi_Contro$food)

#Shapiro - to take into account: lower than 0.05 no normal distribution so lmer is not possible
shapiro.test(tab_respiration_Spi_Contro$respiration) #Shapiro test: p values lower than 0.05 rejected null hypothesis (normal distribution)
#Result: normal distribution
#check outliers - 
outliers <- check_outliers(tab_respiration_Spi_Contro$respiration)
which(outliers)
#result: 0

#food as a factor
tab_respiration_Spi_Contro$food = as.factor(tab_respiration_Spi_Contro$food)

###Check normality
hist(tab_respiration_Spi_Contro, freq = F,
     ylab = "calcification",
     xlab = "Species")
#Result: normal distribution

#lmer model 
model_respiration_Spi_control <- lmer(scale(calcification + 100) ~ food + (1|genotype), data= tab_respiration_Spi_control)
check_singularity(model_respiration_Spi_control)
#Result True
check_normality(model_respiration_Spi_control)
check_heteroscedasticity(model_respiration_Spi_control)
#Result normality ok - ok heterocedasticity
result <- tidy(glht(model_respiration_Spi_control,
                    linfct = mcp(food = "Tukey"))) %>%
  add_significance("adj.p.value")
result

#dissolved food
#Filter Stylophora pistillata
tab_respiration_Spi_dissolved <- tab_respiration %>%
  filter(species=="Stylophora pistillata")
#Filter dissolved food food option
tab_respiration_Spi_dissolved <- tab_respiration_Spi_dissolved %>%
  filter(food=="dissolved food")

#Factor of the analysis
tab_respiration_Spi_dissolved$food = as.factor(tab_respiration_Spi_dissolved$food)

#Shapiro - to take into account: lower than 0.05 no normal distribution so lmer is not possible
shapiro.test(tab_respiration_Spi_dissolved$respiration) #Shapiro test: p values lower than 0.05 rejected null hypothesis (normal distribution)
#Result: normal distribution
#check outliers - 
outliers <- check_outliers(tab_respiration_Spi_dissolved$respiration)
which(outliers)
#result: 0

#food as a factor
tab_respiration_Spi_dissolved$food = as.factor(tab_respiration_Spi_dissolved$food)

###Check normality
hist(tab_respiration_Spi_dissolved, freq = F,
     ylab = "calcification",
     xlab = "Species")
#Result: normal distribution

#lmer model 
model_respiration_Spi_dissolved <- lmer(scale(calcification + 100) ~ food + (1|genotype), data= tab_respiration_Spi_dissolved)
check_singularity(model_respiration_Spi_dissolved)
#Result True
check_normality(model_respiration_Spi_dissolved)
check_heteroscedasticity(model_respiration_Spi_dissolved)
#Result normality ok - ok heterocedasticity
result <- tidy(glht(model_respiration_Spi_dissolved,
                    linfct = mcp(food = "Tukey"))) %>%
  add_significance("adj.p.value")
result

#low complexity
#Filter Stylophora pistillata
tab_respiration_Spi_low <- tab_respiration %>%
  filter(species=="Stylophora pistillata")
#Filter low complexity food option
tab_respiration_Spi_low  <- tab_respiration_Spi_low  %>%
  filter(food=="low complexity")

#Factor of the analysis
tab_respiration_Spi_low$food = as.factor(tab_respiration_Spi_low$food)

#Shapiro - to take into account: lower than 0.05 no normal distribution so lmer is not possible
shapiro.test(tab_respiration_Spi_low$respiration) #Shapiro test: p values lower than 0.05 rejected null hypothesis (normal distribution)
#Result: normal distribution
#check outliers - 
outliers <- check_outliers(tab_respiration_Spi_low$respiration)
which(outliers)
#result: 0

#food as a factor
tab_respiration_Spi_low$food = as.factor(tab_respiration_Spi_low$food)

###Check normality
hist(tab_respiration_Spi_low, freq = F,
     ylab = "calcification",
     xlab = "Species")
#Result: normal distribution

#lmer model 
model_respiration_Spi_low <- lmer(scale(calcification + 100) ~ food + (1|genotype), data= tab_respiration_Spi_low)
check_singularity(model_respiration_Spi_low)
#Result True
check_normality(model_respiration_Spi_low)
check_heteroscedasticity(model_respiration_Spi_low)
#Result normality ok - ok heterocedasticity
result <- tidy(glht(model_respiration_Spi_low,
                    linfct = mcp(food = "Tukey"))) %>%
  add_significance("adj.p.value")
result

#medium complexity
#Filter Stylophora pistillata
tab_respiration_Spi_medium <- tab_respiration %>%
  filter(species=="Stylophora pistillata")
#Filter medium complexity food option
tab_respiration_Spi_medium  <- tab_respiration_Spi_medium  %>%
  filter(food=="medium complexity")

#Factor of the analysis
tab_respiration_Spi_medium$food = as.factor(tab_respiration_Spi_medium$food)

#Shapiro - to take into account: lower than 0.05 no normal distribution so lmer is not possible
shapiro.test(tab_respiration_Spi_medium$respiration) #Shapiro test: p values lower than 0.05 rejected null hypothesis (normal distribution)
#Result: normal distribution
#check outliers - 
outliers <- check_outliers(tab_respiration_Spi_medium$respiration)
which(outliers)
#result: 0

#food as a factor
tab_respiration_Spi_medium$food = as.factor(tab_respiration_Spi_medium$food)

###Check normality
hist(tab_respiration_Spi_medium, freq = F,
     ylab = "calcification",
     xlab = "Species")
#Result: normal distribution

#lmer model 
model_respiration_Spi_medium <- lmer(scale(calcification + 100) ~ food + (1|genotype), data= tab_respiration_Spi_medium)
check_singularity(model_respiration_Spi_medium)
#Result True
check_normality(model_respiration_Spi_medium)
check_heteroscedasticity(model_respiration_Spi_medium)
#Result normality ok - ok heterocedasticity
result <- tidy(glht(model_respiration_Spi_medium,
                    linfct = mcp(food = "Tukey"))) %>%
  add_significance("adj.p.value")
result

#medium complexity
#Filter Stylophora pistillata
tab_respiration_Spi_medium <- tab_respiration %>%
  filter(species=="Stylophora pistillata")
#Filter medium complexity food option
tab_respiration_Spi_medium  <- tab_respiration_Spi_medium  %>%
  filter(food=="medium complexity")

#Factor of the analysis
tab_respiration_Spi_medium$food = as.factor(tab_respiration_Spi_medium$food)

#Shapiro - to take into account: lower than 0.05 no normal distribution so lmer is not possible
shapiro.test(tab_respiration_Spi_medium$respiration) #Shapiro test: p values lower than 0.05 rejected null hypothesis (normal distribution)
#Result: normal distribution
#check outliers - 
outliers <- check_outliers(tab_respiration_Spi_medium$respiration)
which(outliers)
#result: 0

#food as a factor
tab_respiration_Spi_medium$food = as.factor(tab_respiration_Spi_medium$food)

###Check normality
hist(tab_respiration_Spi_medium, freq = F,
     ylab = "calcification",
     xlab = "Species")
#Result: normal distribution

#lmer model 
model_respiration_Spi_medium <- lmer(scale(calcification + 100) ~ food + (1|genotype), data= tab_respiration_Spi_medium)
check_singularity(model_respiration_Spi_medium)
#Result True
check_normality(model_respiration_Spi_medium)
check_heteroscedasticity(model_respiration_Spi_medium)
#Result normality ok - ok heterocedasticity
result <- tidy(glht(model_respiration_Spi_medium,
                    linfct = mcp(food = "Tukey"))) %>%
  add_significance("adj.p.value")
result

#high complexity
#Filter Stylophora pistillata
tab_respiration_Spi_high <- tab_respiration %>%
  filter(species=="Stylophora pistillata")
#Filter high complexity food option
tab_respiration_Spi_high <- tab_respiration_Spi_high  %>%
  filter(food=="high complexity")

#Factor of the analysis
tab_respiration_Spi_high$food = as.factor(tab_respiration_Spi_high$food)

#Shapiro - to take into account: lower than 0.05 no normal distribution so lmer is not possible
shapiro.test(tab_respiration_Spi_high$respiration) #Shapiro test: p values lower than 0.05 rejected null hypothesis (normal distribution)
#Result: normal distribution
#check outliers - 
outliers <- check_outliers(tab_respiration_Spi_high$respiration)
which(outliers)
#result: 0

#food as a factor
tab_respiration_Spi_high$food = as.factor(tab_respiration_Spi_high$food)

###Check normality
hist(tab_respiration_Spi_high, freq = F,
     ylab = "calcification",
     xlab = "Species")
#Result: normal distribution

#lmer model 
model_respiration_Spi_high <- lmer(scale(calcification + 100) ~ food + (1|genotype), data= tab_respiration_Spi_high)
check_singularity(model_respiration_Spi_high)
#Result True
check_normality(model_respiration_Spi_high)
check_heteroscedasticity(model_respiration_Spi_high)
#Result normality ok - ok heterocedasticity
result <- tidy(glht(model_respiration_Spi_high,
                    linfct = mcp(food = "Tukey"))) %>%
  add_significance("adj.p.value")
result
